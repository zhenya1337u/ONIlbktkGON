import platform
import socket
import psutil
import uuid
import ctypes
import logging
import os
from datetime import datetime
from typing import Dict, Any

from utils import get_or_create_instance_id, get_or_create_instance_name

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
def get_system_info() -> Dict[str, Any]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        logging.info("–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∏ –∏–º—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        instance_id = get_or_create_instance_id()
        instance_name = get_or_create_instance_name()
        
        username = "Unknown"
        try:
            username = os.getlogin()
        except OSError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ os.getlogin(): {e}. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            username = os.environ.get("USER") or os.environ.get("USERNAME") or "Unknown"

        ip_address = "N/A"
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip_address = s.getsockname()[0]
            s.close()
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç: {e}. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gethostname.")
            try:
                ip_address = socket.gethostbyname(socket.gethostname())
            except Exception as e_hostname:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ gethostname: {e_hostname}")
                ip_address = "N/A"

        mac_address = "N/A"
        try:
            # For Linux, try to get MAC address from network interfaces
            if platform.system() == "Linux":
                import netifaces
                for interface in netifaces.interfaces():
                    try:
                        if netifaces.AF_LINK in netifaces.ifaddresses(interface):
                            mac_address = netifaces.ifaddresses(interface)[netifaces.AF_LINK][0]["addr"]
                            break
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ MAC-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {interface}: {e}")
            else:
                mac_address = ":".join([f"{((uuid.getnode() >> elements) & 0xff):02x}" for elements in range(0, 48, 8)][::-1])
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ MAC-–∞–¥—Ä–µ—Å–∞: {e}")
            mac_address = "N/A"

        is_admin = False
        try:
            if platform.system() == "Windows":
                is_admin = ctypes.windll.shell32.IsUserAnAdmin()
            else:
                is_admin = (os.geteuid() == 0)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            is_admin = False

        info = {
            "instance_id": instance_id,
            "instance_name": instance_name,
            "hostname": socket.gethostname(),
            "ip": ip_address,
            "os": platform.system(),
            "os_version": platform.version(),
            "username": username,
            "machine": platform.machine(),
            "processor": platform.processor(),
            "ram": f"{round(psutil.virtual_memory().total / (1024.0 ** 3), 2)} GB",
            "mac_address": mac_address,
            "admin": is_admin,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö
        disks = []
        try:
            for part in psutil.disk_partitions():
                try:
                    usage = psutil.disk_usage(part.mountpoint)
                    disks.append({
                        "device": part.device,
                        "mountpoint": part.mountpoint,
                        "fstype": part.fstype,
                        "total": f"{round(usage.total / (1024.0 ** 3), 2)} GB",
                        "used": f"{round(usage.used / (1024.0 ** 3), 2)} GB",
                        "free": f"{round(usage.free / (1024.0 ** 3), 2)} GB",
                        "percent": f"{usage.percent}%"
                    })
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ {part.mountpoint}: {e}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏—Å–∫–æ–≤: {e}")
        info["disks"] = disks
        
        logging.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return info
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        return {"error": str(e)}

def format_system_info(info: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–º HTML –≤–∏–¥–µ.
    
    Args:
        info (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞
    """
    try:
        html = f"""üíª <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï</b>

üÜî <b>–≠–∫–∑–µ–º–ø–ª—è—Ä:</b> <code>{info.get("instance_id", "N/A")}</code>
üìù <b>–ò–º—è:</b> <code>{info.get("instance_name", "N/A")}</code>

üñ•Ô∏è <b>–û–°</b>
‚îú‚îÄ <b>–¢–∏–ø:</b> {info.get("os", "N/A")} {info.get("os_version", "")}
‚îú‚îÄ <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {info.get("machine", "N/A")}
‚îú‚îÄ <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {info.get("processor", "N/A")}
‚îî‚îÄ <b>RAM:</b> {info.get("ram", "N/A")}

üåê <b>–°–ï–¢–¨</b>
‚îú‚îÄ <b>Hostname:</b> <code>{info.get("hostname", "N/A")}</code>
‚îú‚îÄ <b>IP –∞–¥—Ä–µ—Å:</b> <code>{info.get("ip", "N/A")}</code>
‚îî‚îÄ <b>MAC –∞–¥—Ä–µ—Å:</b> <code>{info.get("mac_address", "N/A")}</code>

üë§ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨</b>
‚îú‚îÄ <b>–ò–º—è:</b> <code>{info.get("username", "N/A")}</code>
‚îî‚îÄ <b>–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞:</b> {"‚úÖ –î–∞" if info.get("admin", False) else "‚ùå –ù–µ—Ç"}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö
        if "disks" in info and info["disks"]:
            html += "\n\nüíæ <b>–î–ò–°–ö–ò</b>"
            for i, disk in enumerate(info["disks"]):
                if i == len(info["disks"]) - 1:
                    prefix = "‚îî‚îÄ"
                else:
                    prefix = "‚îú‚îÄ"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                percent = float(disk.get("percent", "0%").replace("%", ""))
                if percent > 90:
                    percent_color = "üî¥"
                elif percent > 70:
                    percent_color = "üü°"
                else:
                    percent_color = "üîµ"
                
                device_name = disk.get("device")
                fstype = disk.get("fstype")
                mountpoint = disk.get("mountpoint")
                total = disk.get("total")
                used = disk.get("used")
                free = disk.get("free")
                percent = disk.get("percent")
                
                html += f"\n{prefix} <b>{device_name}</b> ({fstype})"
                html += f"\n    üìÅ {mountpoint}"
                html += f"\n    üíø {total} | {used} | {free}"
                html += f"\n    {percent_color} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {percent}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        html += f"\n\n‚úÖ <b>–°–¢–ê–¢–£–°:</b> <code>–ê–∫—Ç–∏–≤–µ–Ω</code>"
        
        return html
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:</b>\n<code>{str(e)}</code>"


