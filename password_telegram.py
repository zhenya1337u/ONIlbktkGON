#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Telegram –±–æ—Ç–∞
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∏–∑–æ–ª—è—Ü–∏—é
"""

import requests
import urllib.parse
import json
import logging
from typing import Dict, Any
from datetime import datetime

from config import PASSWORD_BOT_TOKEN, PASSWORD_CHAT_ID

logger = logging.getLogger(__name__)

def send_password_to_telegram(message: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º
        
    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (–¥–ª–∏–Ω–∞: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    max_length = 4000
    if len(message) > max_length:
        message = message[:max_length-100] + "\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ...]"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç
        if PASSWORD_BOT_TOKEN == "YOUR_PASSWORD_BOT_TOKEN" or PASSWORD_CHAT_ID == "YOUR_PASSWORD_CHAT_ID":
            logger.warning("–û—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç")
            return send_password_fallback(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
        url = f'https://api.telegram.org/bot{PASSWORD_BOT_TOKEN}/sendMessage'
        params = {
            'chat_id': PASSWORD_CHAT_ID, 
            'text': message,
            'parse_mode': 'HTML'  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        response = requests.post(url, data=params, timeout=10)
        result = response.json()
        
        if result.get("ok"):
            logger.info("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {result}")
            # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            return send_password_fallback(message)
            
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        return send_password_fallback(message)

def send_password_fallback(message: str) -> Dict[str, Any]:
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç."""
    try:
        from telegram_api import send_text_to_telegram
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        return send_text_to_telegram(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
        return {"ok": False, "error": str(e)}

def send_new_password_notification(username: str, password: str, update_interval: int = 300) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–∞—Ä–æ–ª–µ.
    
    Args:
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password (str): –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        update_interval (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
    """
    try:
        message = f"""
üîê **–ù–û–í–´–ô –ü–ê–†–û–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê**

üìÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `{password}`
üåê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: http://localhost:5000

‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {update_interval // 60} –º–∏–Ω—É—Ç!

üîí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        """
        
        result = send_password_to_telegram(message)
        return result.get("ok", False)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—Ä–æ–ª–µ: {e}")
        return False

def send_custom_credentials_notification(username: str, password: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password (str): –ü–∞—Ä–æ–ª—å
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
    """
    try:
        message = f"""
üë§ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï**

üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: {username}
üîë –ü–∞—Ä–æ–ª—å: `{password}`
üåê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: http://localhost:5000

üîí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        """
        
        result = send_password_to_telegram(message)
        return result.get("ok", False)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_password_bot_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É –±–æ—Ç—É –¥–ª—è –ø–∞—Ä–æ–ª–µ–π.
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        if PASSWORD_BOT_TOKEN == "YOUR_PASSWORD_BOT_TOKEN" or PASSWORD_CHAT_ID == "YOUR_PASSWORD_CHAT_ID":
            logger.warning("–û—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        url = f'https://api.telegram.org/bot{PASSWORD_BOT_TOKEN}/getMe'
        response = requests.get(url, timeout=10)
        result = response.json()
        
        if result.get("ok"):
            bot_info = result.get("result", {})
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –ø–∞—Ä–æ–ª–µ–π —É—Å–ø–µ—à–Ω–æ: @{bot_info.get('username', 'Unknown')}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É –ø–∞—Ä–æ–ª–µ–π: {result}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É –ø–∞—Ä–æ–ª–µ–π: {e}")
        return False

def get_password_bot_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä–æ–ª–µ–π.
    
    Returns:
        Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
    """
    try:
        if PASSWORD_BOT_TOKEN == "YOUR_PASSWORD_BOT_TOKEN":
            return {
                "configured": False,
                "message": "–û—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            }
        
        url = f'https://api.telegram.org/bot{PASSWORD_BOT_TOKEN}/getMe'
        response = requests.get(url, timeout=10)
        result = response.json()
        
        if result.get("ok"):
            bot_info = result.get("result", {})
            return {
                "configured": True,
                "bot_name": bot_info.get("first_name", "Unknown"),
                "bot_username": bot_info.get("username", "Unknown"),
                "chat_id": PASSWORD_CHAT_ID
            }
        else:
            return {
                "configured": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.get('description', 'Unknown error')}"
            }
            
    except Exception as e:
        return {
            "configured": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }
