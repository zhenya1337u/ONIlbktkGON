#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±—ç–∫–¥–æ—Ä–∞.
"""

import subprocess
import sys
import os
import platform

def install_package(package):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ pip."""
    try:
        print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print(f"‚úÖ {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package}: {e}")
        return False

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±—ç–∫–¥–æ—Ä–∞...")
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"üíª –û–°: {platform.system()} {platform.release()}")
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    core_packages = [
        "requests>=2.28.0",
        "psutil>=5.9.0",
        "Pillow>=9.0.0"
    ]
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã
    webcam_packages = [
        "opencv-python>=4.6.0"
    ]
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Linux
    linux_packages = [
        "netifaces>=0.11.0"
    ]
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    optional_packages = [
        "pyarmor>=7.7.0",
        "cryptography>=3.4.0"
    ]
    
    success_count = 0
    total_count = 0
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    for package in core_packages:
        total_count += 1
        if install_package(package):
            success_count += 1
        print()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã
    print("üì∑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã...")
    for package in webcam_packages:
        total_count += 1
        if install_package(package):
            success_count += 1
        print()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Linux –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if platform.system() == "Linux":
        print("üêß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Linux –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        for package in linux_packages:
            total_count += 1
            if install_package(package):
                success_count += 1
            print()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    for package in optional_packages:
        total_count += 1
        if install_package(package):
            success_count += 1
        print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–°–¢–ê–ù–û–í–ö–ò")
    print("=" * 40)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_count - success_count}")
    print(f"üì¶ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {total_count}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_count)*100:.1f}%")
    
    if success_count == total_count:
        print("\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("üöÄ –ë—ç–∫–¥–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print(f"\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count}/{total_count} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    return success_count == total_count

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    print()
    
    dependencies = {
        "requests": "HTTP –∑–∞–ø—Ä–æ—Å—ã",
        "psutil": "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
        "PIL": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "cv2": "–í–µ–±-–∫–∞–º–µ—Ä–∞ (OpenCV)",
        "netifaces": "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (Linux)"
    }
    
    available = []
    missing = []
    
    for module, description in dependencies.items():
        try:
            if module == "PIL":
                import PIL
                available.append(f"‚úÖ {module} - {description}")
            elif module == "cv2":
                import cv2
                available.append(f"‚úÖ {module} - {description}")
            elif module == "netifaces":
                if platform.system() == "Linux":
                    import netifaces
                    available.append(f"‚úÖ {module} - {description}")
                else:
                    available.append(f"‚ÑπÔ∏è {module} - {description} (—Ç–æ–ª—å–∫–æ Linux)")
            else:
                __import__(module)
                available.append(f"‚úÖ {module} - {description}")
        except ImportError:
            missing.append(f"‚ùå {module} - {description}")
    
    print("üìã –°–¢–ê–¢–£–° –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 40)
    
    for item in available:
        print(item)
    
    if missing:
        print()
        print("‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
        for item in missing:
            print(item)
    
    return len(missing) == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –£–°–¢–ê–ù–û–í–©–ò–ö –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ë–≠–ö–î–û–†–ê")
    print("=" * 60)
    print()
    
    if len(sys.argv) > 1 and sys.argv[1] == "--check":
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_dependencies()
    else:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ + –ø—Ä–æ–≤–µ—Ä–∫–∞
        if install_requirements():
            print()
            check_dependencies()
        else:
            print("\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é")

if __name__ == "__main__":
    main()
